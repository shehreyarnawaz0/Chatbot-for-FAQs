# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

!pip install nltk scikit-learn gradio --quiet

import nltk
nltk.download('stopwords', force=True)

import string
import gradio as gr
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

faq_data = {
    "What is web design?": "Web design is the process of creating visually appealing and user-friendly websites.",
    "What is responsive design?": "Responsive design ensures that a website works well on all devices, including mobiles and tablets.",
    "What is UX and UI?": "UX is user experience and UI is user interface. Both focus on how users interact with a site.",
    "What tools do web designers use?": "Popular tools include Figma, Adobe XD, Sketch, and web editors like VS Code.",
    "Do I need to know coding to be a web designer?": "Not necessarily, but knowledge of HTML, CSS, and JavaScript is beneficial.",
    "What is SEO in web design?": "SEO (Search Engine Optimization) improves a website's visibility on search engines.",
    "How long does it take to design a website?": "It depends on the complexity — simple sites take days, larger projects may take weeks.",
    "What is a CMS?": "A CMS (Content Management System) lets you manage website content easily — examples include WordPress and Joomla.",
    "What is accessibility in web design?": "Accessibility ensures your website is usable by people with disabilities.",
    "What is mobile-first design?": "Mobile-first design means designing for mobile devices before scaling up to larger screens."
}

stop_words = set(stopwords.words('english'))

def preprocess(text):
    text = text.lower()
    text = text.translate(str.maketrans('', '', string.punctuation))
    tokens = text.split()  # simple tokenizer instead of word_tokenize
    filtered = [word for word in tokens if word not in stop_words]
    return ' '.join(filtered)

questions = list(faq_data.keys())
processed_questions = [preprocess(q) for q in questions]

vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(processed_questions)

def chatbot_response(user_input):
    user_processed = preprocess(user_input)
    user_vector = vectorizer.transform([user_processed])
    similarity = cosine_similarity(user_vector, tfidf_matrix)
    best_index = similarity.argmax()
    best_score = similarity[0][best_index]

    if best_score > 0.3:
        matched_q = questions[best_index]
        return f"**Q:** {matched_q}\n\n**A:** {faq_data[matched_q]}"
    else:
        return "❌ Sorry, I couldn't find a good match. Try rephrasing your question."

gr.Interface(
    fn=chatbot_response,
    inputs="text",
    outputs="markdown",
    title="💬 Web Design FAQ Chatbot",
    description="Ask me anything about web design — UX, tools, coding, SEO, and more!"
).launch()